/*
Copyright (c) 2020, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */
 
#include <string>

#include "HTTPCodes.hpp"

/**
 * Converts the specific method name, in all caps and without spaces,
 * into an internal representation of an HTTP method, suitable for use
 * with internal handlers.
 *
 * @author Brian Schnepp
 * 
 * @param String the HTTP method, as a string, to interpret
 * @return The returned representation of an HTTP method.
 */
FreedomHTTP::HTTPMethod FreedomHTTP::ParseStringToMethod(std::string String)
{
	/* Probably missing a few... */
	if (String.compare("GET") == 0)
	{
		return HTTP_METHOD_GET;
	} else if (String.compare("HEAD") == 0) {
		return HTTP_METHOD_HEAD;
	} else if (String.compare("POST") == 0) {
		return HTTP_METHOD_POST;
	} else if (String.compare("PUT") == 0) { 
		return HTTP_METHOD_PUT;
	} else if (String.compare("DELETE") == 0) {
		return HTTP_METHOD_DELETE;
	} else if (String.compare("TRACE") == 0) {
		return HTTP_METHOD_TRACE;
	} else if (String.compare("CONNECT") == 0) {
		return HTTP_METHOD_CONNECT;
	}
	
	return HTTP_METHOD_INVALID;
}

std::string 
FreedomHTTP::ParseResponseToString(FreedomHTTP::HTTPResponseCode Code)
{
	std::string Response = "HTTP/1.1 ";
	switch (Code)
	{
		case HTTP_RESPONSE_100_CONTINUE:
			Response += "100 Continue\r\n";
			break;
		case HTTP_RESPONSE_101_SWITCHING_PROTOCOLS:
			Response += "101 Switching Protocols\r\n";
			break;
		case HTTP_RESPONSE_102_PROCESSING:
			Response += "102 Processing\r\n";
			break;
		case HTTP_RESPONSE_103_EARLY_HINTS:
			Response += "103 Early Hints\r\n";
			break;
		
		case HTTP_RESPONSE_200_OK:
			Response += "200 OK\r\n";
			break;
		case HTTP_RESPONSE_201_CREATED:
			Response += "201 Created\r\n";
			break;
		case HTTP_RESPONSE_202_ACCEPTED:
			Response += "202 Accepted\r\n";
			break;
		case HTTP_RESPONSE_203_NON_AUTHORITATIVE_INFORMATION:
			Response += "203 Non Authoritative Information\r\n";
			break;
		case HTTP_RESPONSE_204_NO_CONTENT:
			Response += "204 No Content\r\n";
			break;
		case HTTP_RESPONSE_205_RESET_CONTENT:
			Response += "205 Reset Content\r\n";
			break;
		case HTTP_RESPONSE_206_PARTIAL_CONTENT:
			Response += "206 Partial Content\r\n";
			break;
		case HTTP_RESPONSE_207_MULTI_STATUS:
			Response += "207 Multi Status\r\n";
			break;
		case HTTP_RESPONSE_208_ALREADY_REPORTED:
			Response += "208 Already Reported\r\n";
			break;
		case HTTP_RESPONSE_226_IM_USED:
			Response += "226 IM Used\r\n";
			break;
	
		case HTTP_RESPONSE_300_MULTIPLE_CHOICES:
			Response += "300 Multiple Choices\r\n";
			break;
		case HTTP_RESPONSE_301_MOVED_PERMANENTLY:
			Response += "301 Moved Permanently\r\n";
			break;
		case HTTP_RESPONSE_302_FOUND:
			Response += "302 Found\r\n";
			break;
		case HTTP_RESPONSE_303_SEE_OTHER:
			Response += "303 See Other\r\n";
			break;
		case HTTP_RESPONSE_304_NOT_MODIFIED:
			Response += "304 Not Modified\r\n";
			break;
		case HTTP_RESPONSE_305_USE_PROXY:
			Response += "305 Use Proxy\r\n";
			break;
		case HTTP_RESPONSE_306_SWITCH_PROXY:
			Response += "306 Switch Proxy\r\n";
			break;
		case HTTP_RESPONSE_307_TEMPORARY_REDIRECT:
			Response += "307 Temporary Redirect\r\n";
			break;
		case HTTP_RESPONSE_308_PERMANENT_REDIRECT:
			Response += "308 Permanent Redirect\r\n";
			break;
	
		case HTTP_RESPONSE_400_BAD_REQUEST:
			Response += "400 Bad Request\r\n";
			break;
		case HTTP_RESPONSE_401_UNAUTHORIZED:
			Response += "401 Unauthorized\r\n";
			break;
		case HTTP_RESPONSE_402_PAYMENT_REQUIRED:
			Response += "402 Payment Required\r\n";
			break;
		case HTTP_RESPONSE_403_FORBIDDEN:
			Response += "403 Forbidden\r\n";
			break;
		case HTTP_RESPONSE_404_NOT_FOUND:
			Response += "404 Not Found\r\n";
			break;
		case HTTP_RESPONSE_405_METHOD_NOT_ALLOWED:
			Response += "405 Method Not Allowed\r\n";
			break;
		case HTTP_RESPONSE_406_NOT_ACCEPTABLE:
			Response += "406 Not Acceptable\r\n";
			break;
		case HTTP_RESPONSE_407_PROXY_AUTHENTIFICATION_REQUIRED:
			Response += "407 Proxy Authentification Required\r\n";
			break;
		case HTTP_RESPONSE_408_REQUEST_TIMEOUT:
			Response += "408 Request Timeout\r\n";
			break;
		case HTTP_RESPONSE_409_CONFLICT:
			Response += "409 Conflict\r\n";
			break;
		case HTTP_RESPONSE_410_GONE:
			Response += "410 Gone\r\n";
			break;
		case HTTP_RESPONSE_411_LENGTH_REQUIRED:
			Response += "411 Length Required\r\n";
			break;
		case HTTP_RESPONSE_412_PRECONDITION_FAILED:
			Response += "412 Precondition Failed\r\n";
			break;
		case HTTP_RESPONSE_413_PAYLOAD_TOO_LARGE:
			Response += "413 Payload Too Large\r\n";
			break;
		case HTTP_RESPONSE_414_URI_TOO_LONG:
			Response += "414 URI Too Long\r\n";
			break;
		case HTTP_RESPONSE_415_UNSUPPORTED_MEDIA_TYPE:
			Response += "415 Unsupported Media Type\r\n";
			break;
		case HTTP_RESPONSE_416_RANGE_NOT_SATISFIABLE:
			Response += "416 Range Not Satisfiable\r\n";
			break;
		case HTTP_RESPONSE_417_EXPECTATION_FAILED:
			Response += "417 Expectation Failed\r\n";
			break;
		case HTTP_RESPONSE_418_IM_A_TEAPOT:
			Response += "418 I\'m a Teapot\r\n";
			break;
		case HTTP_RESPONSE_421_MISDIRECTED_REQUEST:
			Response += "421 Misdirected Request\r\n";
			break;
		case HTTP_RESPONSE_422_UNPROCESSABLE_ENTITY:
			Response += "422 Unprocessable Entity\r\n";
			break;
		case HTTP_RESPONSE_423_LOCKED:
			Response += "423 Locked\r\n";
			break;
		case HTTP_RESPONSE_424_FAILED_DEPENDENCY:
			Response += "424 Failed Dependency\r\n";
			break;
		case HTTP_RESPONSE_425_TOO_EARLY:
			Response += "425 Too Early\r\n";
			break;
		case HTTP_RESPONSE_426_UPGRADE_REQUIRED:
			Response += "426 Upgrade Required\r\n";
			break;
		case HTTP_RESPONSE_428_PRECONDITION_REQUIRED:
			Response += "428 Precondition Failed\r\n";
			break;
		case HTTP_RESPONSE_429_TOO_MANY_REQUESTS:
			Response += "429 Too Many Requests\r\n";
			break;
		case HTTP_RESPONSE_431_REQUEST_HEADER_FIELDS_TOO_LARGE:
			Response += "431 Request Header Fields Too Large\r\n";
			break;
		case HTTP_RESPONSE_451_UNAVAILABLE_FOR_LEGAL_REASONS:
			Response += "451 Unavailable For Legal Reasons\r\n";
			break;
		
		default:
		case HTTP_RESPONSE_INVALID:
		case HTTP_RESPONSE_500_INTERNAL_SERVER_ERROR:
			Response += "500 Internal Server Error\r\n";
			break;
			
		case HTTP_RESPONSE_501_NOT_IMPLEMENTED:
			Response += "501 Not Implemented\r\n";
			break;
		case HTTP_RESPONSE_502_BAD_GATEWAY:
			Response += "502 Bad Gateway\r\n";
			break;
		case HTTP_RESPONSE_503_SERVICE_UNAVAILABLE:
			Response += "503 Service Unavailable\r\n";
			break;
		case HTTP_RESPONSE_504_GATEWAY_TIMEOUT:
			Response += "504 Gateway Timeout\r\n";
			break;
		case HTTP_RESPONSE_505_HTTP_VERSION_NOT_SUPPORTED:
			Response += "505 HTTP Version Not Supported\r\n";
			break;
		case HTTP_RESPONSE_506_VARIANT_ALSO_NEGOTIATES:
			Response += "506 Variant Also Negotiates\r\n";
			break;
		case HTTP_RESPONSE_507_INSUFFICIENT_STORAGE:
			Response += "507 Insufficient Storage\r\n";
			break;
		case HTTP_RESPONSE_508_LOOP_DETECTED:
			Response += "508 Loop Detected\r\n";
			break;
		case HTTP_RESPONSE_510_NOT_EXTENDED:
			Response += "510 Not Extended\r\n";
			break;
		case HTTP_RESPONSE_511_NETWORK_AUTHENTICATION_REQUIRED:
			Response += "511 Network Authentication Required\r\n";
			break;
	}
	return Response;
}
