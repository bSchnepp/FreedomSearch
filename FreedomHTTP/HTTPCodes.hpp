/*
Copyright (c) 2020, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */
 
#include <string> 

#ifndef _FREEDOMHTTP_HTTP_CODES_HPP_
#define _FREEDOMHTTP_HTTP_CODES_HPP_
namespace FreedomHTTP
{

typedef enum HTTPMethod
{
	HTTP_METHOD_GET = 0x00,
	HTTP_METHOD_HEAD,
	HTTP_METHOD_POST,
	HTTP_METHOD_PUT,
	HTTP_METHOD_DELETE,
	HTTP_METHOD_TRACE,
	HTTP_METHOD_CONNECT,
	HTTP_METHOD_OPTIONS,
	
	HTTP_METHOD_INVALID = 0xFF,
}HTTPMethod;

typedef enum HTTPResponseCode
{
	HTTP_RESPONSE_100_CONTINUE = 0x0000,
	HTTP_RESPONSE_101_SWITCHING_PROTOCOLS,
	HTTP_RESPONSE_102_PROCESSING,
	HTTP_RESPONSE_103_EARLY_HINTS,
	
	HTTP_RESPONSE_200_OK,
	HTTP_RESPONSE_201_CREATED,
	HTTP_RESPONSE_202_ACCEPTED,
	HTTP_RESPONSE_203_NON_AUTHORITATIVE_INFORMATION,
	HTTP_RESPONSE_204_NO_CONTENT,
	HTTP_RESPONSE_205_RESET_CONTENT,
	HTTP_RESPONSE_206_PARTIAL_CONTENT,
	HTTP_RESPONSE_207_MULTI_STATUS,
	HTTP_RESPONSE_208_ALREADY_REPORTED,
	HTTP_RESPONSE_226_IM_USED,
	
	HTTP_RESPONSE_300_MULTIPLE_CHOICES,
	HTTP_RESPONSE_301_MOVED_PERMANENTLY,
	HTTP_RESPONSE_302_FOUND,
	HTTP_RESPONSE_303_SEE_OTHER,
	HTTP_RESPONSE_304_NOT_MODIFIED,
	HTTP_RESPONSE_305_USE_PROXY,
	HTTP_RESPONSE_306_SWITCH_PROXY,
	HTTP_RESPONSE_307_TEMPORARY_REDIRECT,
	HTTP_RESPONSE_308_PERMANENT_REDIRECT,
	
	HTTP_RESPONSE_400_BAD_REQUEST,
	HTTP_RESPONSE_401_UNAUTHORIZED,
	HTTP_RESPONSE_402_PAYMENT_REQUIRED,
	HTTP_RESPONSE_403_FORBIDDEN,
	HTTP_RESPONSE_404_NOT_FOUND,
	HTTP_RESPONSE_405_METHOD_NOT_ALLOWED,
	HTTP_RESPONSE_406_NOT_ACCEPTABLE,
	HTTP_RESPONSE_407_PROXY_AUTHENTIFICATION_REQUIRED,
	HTTP_RESPONSE_408_REQUEST_TIMEOUT,
	HTTP_RESPONSE_409_CONFLICT,
	HTTP_RESPONSE_410_GONE,
	HTTP_RESPONSE_411_LENGTH_REQUIRED,
	HTTP_RESPONSE_412_PRECONDITION_FAILED,
	HTTP_RESPONSE_413_PAYLOAD_TOO_LARGE,
	HTTP_RESPONSE_414_URI_TOO_LONG,
	HTTP_RESPONSE_415_UNSUPPORTED_MEDIA_TYPE,
	HTTP_RESPONSE_416_RANGE_NOT_SATISFIABLE,
	HTTP_RESPONSE_417_EXPECTATION_FAILED,
	HTTP_RESPONSE_418_IM_A_TEAPOT,
	HTTP_RESPONSE_421_MISDIRECTED_REQUEST,
	HTTP_RESPONSE_422_UNPROCESSABLE_ENTITY,
	HTTP_RESPONSE_423_LOCKED,
	HTTP_RESPONSE_424_FAILED_DEPENDENCY,
	HTTP_RESPONSE_425_TOO_EARLY,
	HTTP_RESPONSE_426_UPGRADE_REQUIRED,
	HTTP_RESPONSE_428_PRECONDITION_REQUIRED,
	HTTP_RESPONSE_429_TOO_MANY_REQUESTS,
	HTTP_RESPONSE_431_REQUEST_HEADER_FIELDS_TOO_LARGE,
	HTTP_RESPONSE_451_UNAVAILABLE_FOR_LEGAL_REASONS,
	
	HTTP_RESPONSE_500_INTERNAL_SERVER_ERROR,
	HTTP_RESPONSE_501_NOT_IMPLEMENTED,
	HTTP_RESPONSE_502_BAD_GATEWAY,
	HTTP_RESPONSE_503_SERVICE_UNAVAILABLE,
	HTTP_RESPONSE_504_GATEWAY_TIMEOUT,
	HTTP_RESPONSE_505_HTTP_VERSION_NOT_SUPPORTED,
	HTTP_RESPONSE_506_VARIANT_ALSO_NEGOTIATES,
	HTTP_RESPONSE_507_INSUFFICIENT_STORAGE,
	HTTP_RESPONSE_508_LOOP_DETECTED,
	HTTP_RESPONSE_510_NOT_EXTENDED,
	HTTP_RESPONSE_511_NETWORK_AUTHENTICATION_REQUIRED,
	
	HTTP_RESPONSE_INVALID = 0xFFFF,
}HTTPResponseCode;

HTTPMethod ParseStringToMethod(std::string String);

std::string ParseResponseToString(HTTPResponseCode Code);

}
#endif
