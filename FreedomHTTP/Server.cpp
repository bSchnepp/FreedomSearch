/*
Copyright (c) 2020, Brian Schnepp

Permission is hereby granted, free of charge, to any person or organization 
obtaining  a copy of the software and accompanying documentation covered by 
this license (the "Software") to use, reproduce, display, distribute, execute, 
and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all 
subject to the following:

The copyright notices in the Software and this entire statement, including 
the above license grant, this restriction and the following disclaimer, must 
be included in all copies of the Software, in whole or in part, and all 
derivative works of the Software, unless such copies or derivative works are 
solely in the form of machine-executable object code generated by a source 
language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY 
DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
IN THE SOFTWARE.
 */
 
#include <iostream>
#include <string>
#include <sstream>

#include <boost/asio.hpp>
#include <boost/algorithm/string.hpp>


#include <unordered_map>

#include "urilite.h"

#include "HTTPCodes.hpp"
#include "Server.hpp"

using tcp = boost::asio::ip::tcp;

FreedomHTTP::HTTPRequest FreedomHTTP::ParseRequest(std::string Content)
{
	/* nyi */
	std::istringstream CStream(Content);
	FreedomHTTP::HTTPRequest RetVal;
	
	std::string Line;
	while (std::getline(CStream, Line))
	{
		if (Line.compare("\r") == 0)
		{
			break;
		}
		
		std::string::size_type Index = Line.find(':',  0);
		if (Index != std::string::npos)
		{
			std::string Key 
				= boost::algorithm::trim_copy(Line.substr(
					0, Index));
					
			std::string Value
				= boost::algorithm::trim_copy(Line.substr(
					Index+1));
			RetVal.Headers[Key] = Value;
		} else if (Line.find("HTTP/") != std::string::npos) {
			std::vector<std::string> Parts;
			boost::split(Parts, Line, boost::is_any_of(" "));
			if (Parts.size() != 3)
			{
				RetVal.HTTPVersion = 1.1f;
				RetVal.Method = HTTP_METHOD_GET;
				RetVal.Location = "invalid";
				return RetVal;
			}
			
			RetVal.Method = ParseStringToMethod(Parts[0]);
			RetVal.Location = Parts[1];
			
			std::vector<std::string> HTTPSplit;
			boost::split(HTTPSplit, Parts[2], 
				boost::is_any_of("/"));
			if (HTTPSplit[0].compare("HTTP") == 0)
			{
				RetVal.HTTPVersion = atof(HTTPSplit[1].c_str());
			} else {
				RetVal.HTTPVersion = 1.1f;
				RetVal.Method = HTTP_METHOD_GET;
				RetVal.Location = "invalid";
				return RetVal;
			}
		}
	}
	if (Content.find("\r\n\r\n") != std::string::npos)
	{
		if (RetVal.Headers.find("Content-Length") 
			!= RetVal.Headers.end())
		{
			std::string Rest 
				= Content.substr(Content.find("\r\n\r\n"));
			RetVal.ContentLength = Rest.length();
			if (std::stoull(
				RetVal.Headers["Content-Length"], NULL, 10) 
					!= RetVal.ContentLength)
			{
				std::cerr 
					<< "Inconsistent content length. " 
					<< std::endl;
			}

			/* HACK. Make sure this works. */
			RetVal.Content 
				= reinterpret_cast<uint8_t*>(Rest.data());
		} else {
			RetVal.ContentLength = 0;
			/* NYI: Chunked content (ie, streaming) */
		}
	}
	/* Use urilite to handle %20 and + and whatnot.
	 * TODO: Make sure that HTTP spec is happy with this
	 * behavior!
	 */
	RetVal.Location = urilite::uri::decode(RetVal.Location);
	RetVal.Location = urilite::uri::decode2(RetVal.Location);
	return RetVal;
}


/**
 * Sets up the integrated web server
 * to begin listening in port 8080.
 *
 * @see FreedomHTTP::Server::Server(uint16_t Port)
 * @author Brian Schnepp
 */
FreedomHTTP::Server::Server() 
	: FreedomHTTP::Server::Server(8080)
{

}

FreedomHTTP::Server::Server(uint16_t Port)
{
	this->Port = Port;
}
	
void FreedomHTTP::Server::Run()
{
	boost::asio::io_context IOContext;
	tcp::acceptor Acceptor(IOContext,
		tcp::endpoint(tcp::v4(), this->Port));
		
	for (;;)
	{
		/*
		 * TODO: Make async, add in watchdog timer,
		 * and keep connections open until watchdog expires 
		 */
		try
		{
			tcp::socket Socket(IOContext);
			Acceptor.accept(Socket);
			boost::system::error_code Error;
			
			boost::asio::streambuf RecieveBuffer;
			boost::asio::read(Socket, RecieveBuffer, 
				boost::asio::transfer_at_least(1), Error);
			
			if (Error && Error != boost::asio::error::eof)
			{
				/* Uh oh... */
				Socket.close();
				continue;
			}
			
			boost::asio::streambuf::const_buffers_type Bufs 
				= RecieveBuffer.data();
			std::string Convert(
				boost::asio::buffers_begin(Bufs),
				boost::asio::buffers_begin(Bufs) + Bufs.size());
			
			FreedomHTTP::HTTPRequest Interped 
				= FreedomHTTP::ParseRequest(Convert);

			std::string Reply = "Hello, world: " + std::to_string(Interped.ContentLength) + " " + Interped.Location;
			
			std::string Message 
				= FreedomHTTP::ParseResponseToString(
					FreedomHTTP::HTTP_RESPONSE_200_OK);
			Message += "Connection: Closed\r\n";
			Message += "Content-Length: " 
				+ std::to_string(Reply.length()) + "\r\n";
			Message += "\r\n";
			Message += Reply;
			
				
			boost::asio::write(
				Socket, boost::asio::buffer(Message), 
				Error);
		} catch (std::exception &Exception) {
			std::cerr << Exception.what() << std::endl;
		}
	}
}

bool FreedomHTTP::Server::Mount(std::string Location, EndpointHandler Handler)
{
	if (this->Mounts.count(Location))
	{
		return false;
	}
	this->Mounts[Location] = Handler;
	return true;
}

/**
 * Removes a mounted endpoint from the virtual filesystem
 * for the web server. This causes any subsequent requests to
 * the location to be supplied with the default 404 Not Found page.
 *
 * @author Brian Schnepp
 * @param Location The location in the VFS to remove
 * @return True on success, false otherwise
 */
bool FreedomHTTP::Server::Umount(std::string Location)
{
	if (this->Mounts.count(Location))
	{
		this->Mounts.erase(Location);
		return true;
	}
	return false;
}
